const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const nodemailer = require('nodemailer');

const app = express();
const PORT = process.env.PORT || 3000;
require('dotenv').config();



app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});






// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Nodemailer
console.log('EMAIL_USER:', process.env.EMAIL_USER);
console.log('EMAIL_PASS:', process.env.EMAIL_PASS ? '‚úÖ –ü–∞—Ä–æ–ª—å —î' : '‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransport({
  host: 'smtp.gmail.com',
  port: 465, // –∏–ª–∏ 587
  secure: true, // true –¥–ª—è 465, false –¥–ª—è 587
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  },
  
});

app.get('/test-email', (req, res) => {
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: process.env.EMAIL_USER,
    subject: '–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
    text: '–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email —á–µ—Ä–µ–∑ Nodemailer.'
  };

  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email:', error);
      return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email');
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π email –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:', info.response);
      return res.send('–¢–µ—Å—Ç–æ–≤–∏–π email —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!');
    }
  });
});





app.use(cors());
app.use(bodyParser.json());

// üì© –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏
app.post('/api/contact', (req, res) => {
  const { name, email, message } = req.body;

  if (!name || !email || !message) {
    return res.status(400).json({ success: false, message: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ' });
  }

  const logEntry = `
===========================
–î–∞—Ç–∞: ${new Date().toLocaleString()}
–Ü–º'—è: ${name}
Email: ${email}
–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${message}
===========================\n`;

  fs.appendFile(path.join(__dirname, 'messages.txt'), logEntry, (err) => {
    if (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', err);
    } else {
      console.log('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ messages.txt');
    }
  });

  const mailOptions = {
    from: 'fffvladimir952@gmail.com',
    to: 'fffvladimir952@gmail.com',
    subject: `–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${name}`,
    text: `–Ü–º'—è: ${name}\nEmail: ${email}\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n${message}`
  };

  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è email:', error);
    } else {
      console.log('Email –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:', info.response);
    }
  });

  res.status(200).json({ success: true, message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ!' });
});

// üõí –û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
app.post('/api/order', (req, res) => {
  console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', req.body);

  const { items, customer } = req.body;

  if (
    !items || !Array.isArray(items) || items.length === 0 ||
    !customer || !customer.name || !customer.phone
  ) {
    console.error('–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
    return res.status(400).json({ success: false, message: '–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
  }

  const newOrderId = Date.now(); // ‚úÖ —Å—Ç–≤–æ—Ä—é—î–º–æ ID
  const email = customer.email || '';
  const total = items.reduce((sum, item) => sum + item.price, 0);
  const itemList = items.map(item => `‚Ä¢ ${item.name} ‚Äî ${item.price} –≥—Ä–Ω`).join('\n');

  const orderLog = `
===========================
–î–∞—Ç–∞: ${new Date().toLocaleString()}
–Ü–º'—è: ${customer.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${customer.phone}
Email: ${email || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
–î–æ—Å—Ç–∞–≤–∫–∞: ${customer.delivery}
–¢–æ–≤–∞—Ä–∏:
${itemList}
–Ü—Ç–æ–≥–æ: ${total} –≥—Ä–Ω
===========================\n`;

  fs.appendFile(path.join(__dirname, 'order.txt'), orderLog, (err) => {
    if (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', err);
      return res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
    }

    console.log('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ order.txt');

     

    // ‚úÖ –ù–∞–¥—Å–∏–ª–∞—î–º–æ email, —è–∫—â–æ —î
    if (email) {
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
        html: `
          <div style="font-family: Arial, sans-serif; padding: 20px; background-color: #f9f9f9;">
            <h2 style="color: #333;">–ü—Ä–∏–≤—ñ—Ç, ${customer.name}!</h2>
            <p>–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –û—Å—å –π–æ–≥–æ –¥–µ—Ç–∞–ª—ñ:</p>
            <ul style="padding-left: 20px;">
              ${items.map(item => `<li>${item.name} ‚Äî <strong>${item.price} –≥—Ä–Ω</strong></li>`).join('')}
            </ul>
            <p><strong>–Ü—Ç–æ–≥–æ: ${total} –≥—Ä–Ω</strong></p>
            <hr />
            <p style="font-size: 12px; color: #777;">–¶–µ–π –ª–∏—Å—Ç —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –Ω—å–æ–≥–æ.</p>
          </div>
        `
      };

      transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:', error);
        } else {
          console.log('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:', info.response);
        }
      });


    }
const adminMailOptions = {
  from: process.env.EMAIL_USER,
  to: process.env.EMAIL_USER, // —Ç–≤–æ—è –ø–æ—à—Ç–∞
  subject: `–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ ${customer.name}`,
  text: `
–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!

–Ü–º'—è: ${customer.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${customer.phone}
Email: ${email || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
–î–æ—Å—Ç–∞–≤–∫–∞: ${customer.delivery}
–¢–æ–≤–∞—Ä–∏:
${itemList}

–Ü—Ç–æ–≥–æ: ${total} –≥—Ä–Ω
`
};

transporter.sendMail(adminMailOptions, (error, info) => {
  if (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error);
  } else {
    console.log('‚úÖ –õ–∏—Å—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:', info.response);
  }

});


  });
// ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—É
    res.status(200).json({ success: true, orderId: newOrderId });
});

// üìÇ –ü–µ—Ä–µ–≥–ª—è–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
app.get('/admin/messages', (req, res) => {
  fs.readFile(path.join(__dirname, 'messages.txt'), 'utf8', (err, data) => {
    if (err) {
      return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è messages.txt');
    }
    res.send(`<pre>${data}</pre>`);
  });
});

// üìÇ –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å
app.get('/admin/orders', (req, res) => {
  fs.readFile(path.join(__dirname, 'order.txt'), 'utf8', (err, data) => {
    if (err) {
      return res.status(500).send('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è order.txt');
    }
    res.send(`<pre>${data}</pre>`);
  });
});


const crypto = require('crypto');




app.use(express.static(__dirname)); // –∏–ª–∏ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å HTML –∏ script.js
app.use(bodyParser.json());

app.post('/generate-liqpay', (req, res) => {
  const { amount, orderId } = req.body;

  const public_key = 'your_public_key';
  const private_key = 'your_private_key';

  const payment = {
    version: '3',
    public_key,
    action: 'pay',
    amount,
    currency: 'UAH',
    description: `–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${orderId}`,
    order_id: `order_${orderId}`,
    language: 'uk'
  };

  const data = Buffer.from(JSON.stringify(payment)).toString('base64');
  const signature = Buffer.from(
    crypto.createHash('sha1').update(private_key + data + private_key).digest()
  ).toString('base64');

  res.json({ data, signature });
});





app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
});

















